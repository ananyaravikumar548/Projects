# -*- coding: utf-8 -*-
"""wine quality prediction .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13Yq1zruZZzYSQwKFtj4K7CiKW-AiztSm

WINE QUALITY PREDICTION USING SUPPORT VECTOR MACHINE

GET UNDERSTANDING ABOUT DATA SET


1.   fixed acidity
2.   volatile acidity
3.  citric acid
4.  residual sugar
5.   chlorides
6.   free sulphur dioxide
7.  total sulphur dioxide
8.   density
9.   ph
10. sulphates
11.  alcohol
12.  quality
"""

# @title Import Library
import pandas as pd

import numpy as np

# @title Import CSV as Dataframe
df = pd.read_csv(r'https://raw.githubusercontent.com/YBIFoundation/Dataset/refs/heads/main/WhiteWineQuality.csv' , sep=';')

# @title Get the first five rows of Dataframe
df.head()

# @title Get information about Dataframe
df.info()

# @title Get the summary statistics
df.describe()

# @title Get column name
df.columns

# @title Get shape of dataframe
df.shape

# @title Get unique values (label or class ) in y variable
df['quality'].value_counts()

df.groupby('quality').mean()

# @title Define Y(dependent or label or target variable) and X(independent or features or attribute variable )
y= df['quality']

y.shape

y

X = df.drop(['quality'], axis=1)

X.shape

X

"""standardization of datasets is a common requirement for many machine learning estimators implemented in scikit learn; they might behave badly if the individual features do not more or less look like standard normally distributed data ;Guassian with zero mean and unit varience ."""

# @title Get X variable standardized

from sklearn.preprocessing import StandardScaler

ss = StandardScaler()

X = ss.fit_transform(X)

X

# @title Get Train Test split
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, stratify=y, random_state=2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

# @title Get Model Train
from sklearn.svm import SVC

svc = SVC()

svc.fit(X_train , y_train)

# @title Get Model Prediction
y_pred = svc.predict(X_test)

y_pred.shape

y_pred

# @title Get Model Evaluation
from sklearn.metrics import confusion_matrix, classification_report

print (confusion_matrix(y_test, y_pred))

print (classification_report(y_test, y_pred))

# @title Get model Re-run with Two Class created with wine quality
y= df['quality'].apply(lambda y_value: 1 if y_value>=6 else 0)

"""Wine Quality 3,4,5 labelled as 0

*  Wine Quality 6,7,8,9 labelled as 1


"""

y.value_counts()

# @title Get Train Test split
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3, stratify=y, random_state=2529)

X_train.shape, X_test.shape, y_train.shape, y_test.shape

# @title Get Model Train
from sklearn.svm import SVC

svc = SVC()

svc.fit(X_train, y_train)

# @title Get Model Prediction
y_pred = svc.predict(X_test)

y_pred.shape

y_pred

# @title Get Model Evaluation
from sklearn.metrics import confusion_matrix, classification_report

print (confusion_matrix(y_test, y_pred))

print (classification_report(y_test, y_pred))

"""GET FUTURE PREDICTIONS

*   steps to follow
   

1.   extract a random row using sample function
2.   separate X and Y
3.   Standardize X
4.   predict








"""

df_new = df.sample(1)

df_new

df_new.shape

X_new = df_new.drop(['quality'], axis=1)

X_new = ss.fit_transform(X_new)

y_pred_new = svc.predict(X_new)

y_pred_new